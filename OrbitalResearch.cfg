AGENT
{
	name = Kerbal Space Agency (KSA)
	description = We are the organization you're running. We built KSC. You run us. 
	logoURL = 
	logoScaledURL =
}
CONTRACT_TYPE
{
	name = ExodusOrbitContracts
	title = Exodus Orbit Contract for @/targetbody1
	group = ExodusStoryContracts
	
	description = We have a plan to save the Kerbal race from that incoming space rock. We're all going to live in space. Now, we need you to run a mission to our current target (@/targetbody1), run some experiments in orbit there. That way we can run the calculations on your data and find out if we can put a station in orbit or a base on the surface.

	synopsis = We need to put a vessel in orbit of @/targetbody1, and perform a gravioli experiment, crew report, and EVA report when there.
	
	completedMessage = Great job! We have all the data we need to put together new colony missions for @/targetbody1!
	
	minExpiry = 0.0
	maxExpiry = 0.0 
	
	// Need some way to make this dependent on @/targetbody1's distance from KSC. (not kerbin, because in mid game, KSC needs to move off Kerbin) The further the body, the longer the deadline, math'd out of transfer window averages.
	// deadline = 
	
	cancellable = false
	declinable = false
	autoAccept = false
	targetBody = @/targetbody1
	maxSimultaneous = 1
	
	// again, needs to be distance-reliant -- closer bodys need smaller rewards/etc
	//rewardScience = 
	//rewardFunds = 
	//rewardReputation = 
	//failureReputation =
	//failureFunds = 
	//advanceFunds =
	
	// again, distance-reliant, but reversed -- closer bodys receive heavier weight
	//weight =
	
	DATA
	{
		// Need some way to ensure this value doesn't repeat. eg no two orbital data gather missions to Minmus. I --THINK-- that's what this does.
		uniquenessCheck = GROUP_ALL
		
		// Probably should also add a string to try and limit this to some kind of logical sequence via distance 
		// targetbody1 = I haven't a clue yet. 
		
		type = CelestialBody
		requiredValue = true
		
	}
	PARAMETER
	{
		name = All
		Type = All
			PARAMETER
			{
				name = Orbit
				type = Orbit
				targetBody = @/targetbody1
				situation = ORBITING
			}
			PARAMETER
			{
				name = Gravioli
				// type = 
				targetBody = @/targetbody1
				situation = ORBITING
			}
			PARAMETER
			{
				name = Crew Report
				// type =
				targetBody = @/targetbody1
				situation = ORBITING
			}
			PARAMETER
			{
				name = EVA Report
				// type = 
				targetBody = @/targetbody1
				situation = ORBITING? EVA?
			}
			PARAMETER
			{
				name = Science Recieved
				//type =
				
			}
}
