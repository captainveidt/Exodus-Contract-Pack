CONTRACT_TYPE
{
	name = ExodusOrbitContracts
	title = Exodus Orbit Contract for @/targetbody1
	group = ExodusStoryContracts
	
	description = We have a plan to save the Kerbal race from that incoming space rock. We're all going to live in space. Now, we need you to run a mission to our current target (@/targetbody1), run some experiments in orbit there. That way we can run the calculations on your data and find out if we can put a station in orbit or a base on the surface.

	synopsis = We need to put a vessel in orbit of @/targetbody1, and perform a gravioli experiment, crew report, and EVA report when there.
	
	completedMessage = Great job! We have all the data we need to put together new colony missions for @/targetbody1!
	
	minExpiry = 0.0
	maxExpiry = 0.0 

	// This should determine the deadline via dividing the distance from KSC by a number slightly higher than the delta-V required to escape the Kerbin planetary system and then adding 3 weeks to that number. Not sure if this will be balanced.
	deadline = ((pos.@/TargetBody1 - pos.KSC)/4000) + 21
	
	cancellable = false
	declinable = false
	autoAccept = false
	targetBody = @/targetbody1
	maxSimultaneous = 1
	
	// These are are all affected by default by both a multiplier given by body & the contract prestige. Need to know if OuterSystemPlanet's bodies are also affected the same.
	rewardScience = 25
	rewardFunds = 60000
	rewardReputation = 5
	failureReputation = 2
	failureFunds = 35000
	advanceFunds = 30000
	
	// Since orbiting is the most basic and simple story mission type, it should be given a higher weight than bases or stations. This allows the player, especially earlier on, to use Orbital missions as a method of gaining funds/science to support his bases/stations missions. 
	weight = 5.0
	
	DATA
	{
		// Need some way to ensure this value doesn't repeat. eg no two orbital data gather missions to Minmus. I --THINK-- that's what this does, but am unsure. 
		uniquenessCheck = GROUP_ALL
		 
		// Currently untested. What this should do is pull a body from the A1 "Orbitals" list. 
		targetbody1 = A1 Retrieve<A1>(Random) 
		
		type = CelestialBody
		requiredValue = true
		
	}
	PARAMETER
	{
		name = All
		Type = All
			PARAMETER
			{
				name = Orbit
				type = Orbit
				targetBody = @/targetbody1
				situation = ORBITING
			}
			PARAMETER
			{
				name = Gravioli
				// type = 
				targetBody = @/targetbody1
				situation = ORBITING
			}
			PARAMETER
			{
				name = Crew Report
				// type =
				targetBody = @/targetbody1
				situation = ORBITING
			}
			PARAMETER
			{
				name = EVA Report
				// type = 
				targetBody = @/TargetBody1
				situation = ORBITING
			}
			PARAMETER
			{
				name = Science Recieved
				//type =
				
			}
	CONTRACT_COMPLETED_SUCCESS
		{
		// This should set the body that was orbited as a possible choice in the A2 "Stations" list. 
		// void Store<A2>(EX##,@/targetbody1)
		// This should remove the body that was chosen as a possible choice in the A1 "Orbitals" list
		// void Remove<A1>(EX##,@/targetbody1)
		}
}
